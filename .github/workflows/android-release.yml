name: Android Release

on:
  push:
    branches: [ "main" ]
    # You can also set it to trigger on specific tags if preferred
    # tags:
    #   - 'v*'

jobs:
  build:
    name: Build and Release Android App Bundle
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for version number generation based on git history
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0' # Update this to match your project's Flutter version
          channel: 'stable'
          cache: true
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Run code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs
      
      - name: Create keystore file
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore/upload-keystore.jks
        
      - name: Create key.properties file
        run: |
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore/upload-keystore.jks" >> android/key.properties
      
      - name: Generate version number
        id: version
        run: |
          # Get the latest tag or use 0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          
          # Remove the 'v' prefix if it exists
          LATEST_TAG=${LATEST_TAG#v}
          
          # Split the version number
          IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_TAG"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Increment the patch version
          PATCH=$((PATCH + 1))
          
          # Put it back together
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          # Set the new version for later steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update pubspec.yaml with the new version
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
      
      - name: Build App Bundle
        run: flutter build appbundle --release
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            build/app/outputs/bundle/release/app-release.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-aab
          path: build/app/outputs/bundle/release/app-release.aab